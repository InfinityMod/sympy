# *** GENERATED BY `setup.py antlr`, DO NOT EDIT BY HAND ***
#
# Generated from ../LaTeX.g4, derived from latex2sympy
#     latex2sympy is licensed under the MIT license
#     https://github.com/augustt198/latex2sympy/blob/master/LICENSE.txt
#
# Generated with antlr4
#    antlr4 is licensed under the BSD-3-Clause License
#    https://github.com/antlr/antlr4/blob/master/LICENSE.txt
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,92,557,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,1,0,1,0,1,1,1,1,1,2,1,2,
        1,2,1,2,1,2,1,2,5,2,99,8,2,10,2,12,2,102,9,2,1,3,1,3,1,3,1,3,1,4,
        1,4,1,5,1,5,1,5,1,5,1,5,1,5,5,5,116,8,5,10,5,12,5,119,9,5,1,6,1,
        6,1,6,1,6,1,6,1,6,5,6,127,8,6,10,6,12,6,130,9,6,1,7,1,7,1,7,1,7,
        1,7,1,7,5,7,138,8,7,10,7,12,7,141,9,7,1,8,1,8,1,8,4,8,146,8,8,11,
        8,12,8,147,3,8,150,8,8,1,9,1,9,1,9,1,9,5,9,156,8,9,10,9,12,9,159,
        9,9,3,9,161,8,9,1,10,1,10,5,10,165,8,10,10,10,12,10,168,9,10,1,11,
        1,11,5,11,172,8,11,10,11,12,11,175,9,11,1,12,1,12,3,12,179,8,12,
        1,13,1,13,1,13,1,13,1,13,1,13,3,13,187,8,13,1,14,1,14,1,14,1,14,
        3,14,193,8,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,201,8,15,1,15,1,
        15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,215,8,
        16,1,16,3,16,218,8,16,5,16,220,8,16,10,16,12,16,223,9,16,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,235,8,17,1,17,3,
        17,238,8,17,5,17,240,8,17,10,17,12,17,243,9,17,1,18,1,18,1,18,1,
        18,1,18,1,18,3,18,251,8,18,1,19,1,19,1,19,1,19,1,19,3,19,258,8,19,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,3,20,276,8,20,1,21,1,21,1,21,1,21,1,22,4,22,283,8,
        22,11,22,12,22,284,1,22,1,22,1,22,1,22,5,22,291,8,22,10,22,12,22,
        294,9,22,1,22,1,22,4,22,298,8,22,11,22,12,22,299,3,22,302,8,22,1,
        23,1,23,3,23,306,8,23,1,23,3,23,309,8,23,1,23,3,23,312,8,23,1,23,
        3,23,315,8,23,3,23,317,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
        23,3,23,327,8,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,
        26,1,26,1,26,1,26,1,27,1,27,1,27,5,27,345,8,27,10,27,12,27,348,9,
        27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,5,29,358,8,29,10,29,12,
        29,361,9,29,1,30,1,30,1,30,1,30,1,30,1,30,3,30,369,8,30,1,30,1,30,
        1,30,1,30,1,30,3,30,376,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,35,1,35,
        3,35,398,8,35,1,35,3,35,401,8,35,1,35,3,35,404,8,35,1,35,3,35,407,
        8,35,3,35,409,8,35,1,35,3,35,412,8,35,1,35,1,35,1,35,1,35,1,35,3,
        35,419,8,35,1,35,3,35,422,8,35,1,35,1,35,3,35,426,8,35,1,35,3,35,
        429,8,35,1,35,3,35,432,8,35,1,35,3,35,435,8,35,3,35,437,8,35,1,35,
        3,35,440,8,35,1,35,1,35,1,35,1,35,3,35,446,8,35,1,35,1,35,1,35,1,
        35,1,35,1,35,1,35,3,35,455,8,35,1,35,3,35,458,8,35,1,35,1,35,1,35,
        3,35,463,8,35,1,35,1,35,1,35,1,35,1,35,3,35,470,8,35,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,3,35,488,8,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,496,8,35,1,36,
        1,36,1,36,1,36,1,36,3,36,503,8,36,1,37,1,37,1,37,1,37,1,37,1,37,
        1,37,1,37,1,37,1,37,1,37,3,37,516,8,37,3,37,518,8,37,1,37,1,37,1,
        38,1,38,1,38,1,38,1,38,3,38,527,8,38,1,39,1,39,1,40,1,40,1,40,1,
        40,1,40,1,40,3,40,537,8,40,1,41,1,41,1,41,1,41,1,41,1,41,3,41,545,
        8,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,0,6,
        4,10,12,14,32,34,44,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,80,82,84,86,0,10,6,0,25,26,74,74,76,76,80,83,86,87,90,90,2,0,
        80,83,86,87,1,0,15,16,3,0,17,18,65,67,76,76,2,0,78,78,92,92,1,0,
        27,28,2,0,27,27,29,29,1,0,69,71,1,0,37,58,1,0,35,36,605,0,88,1,0,
        0,0,2,90,1,0,0,0,4,92,1,0,0,0,6,103,1,0,0,0,8,107,1,0,0,0,10,109,
        1,0,0,0,12,120,1,0,0,0,14,131,1,0,0,0,16,149,1,0,0,0,18,160,1,0,
        0,0,20,162,1,0,0,0,22,169,1,0,0,0,24,178,1,0,0,0,26,180,1,0,0,0,
        28,188,1,0,0,0,30,196,1,0,0,0,32,204,1,0,0,0,34,224,1,0,0,0,36,250,
        1,0,0,0,38,257,1,0,0,0,40,275,1,0,0,0,42,277,1,0,0,0,44,282,1,0,
        0,0,46,326,1,0,0,0,48,328,1,0,0,0,50,332,1,0,0,0,52,336,1,0,0,0,
        54,346,1,0,0,0,56,349,1,0,0,0,58,359,1,0,0,0,60,362,1,0,0,0,62,377,
        1,0,0,0,64,385,1,0,0,0,66,389,1,0,0,0,68,393,1,0,0,0,70,495,1,0,
        0,0,72,502,1,0,0,0,74,504,1,0,0,0,76,526,1,0,0,0,78,528,1,0,0,0,
        80,530,1,0,0,0,82,538,1,0,0,0,84,546,1,0,0,0,86,551,1,0,0,0,88,89,
        7,0,0,0,89,1,1,0,0,0,90,91,3,4,2,0,91,3,1,0,0,0,92,93,6,2,-1,0,93,
        94,3,8,4,0,94,100,1,0,0,0,95,96,10,2,0,0,96,97,7,1,0,0,97,99,3,4,
        2,3,98,95,1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,
        101,5,1,0,0,0,102,100,1,0,0,0,103,104,3,8,4,0,104,105,5,80,0,0,105,
        106,3,8,4,0,106,7,1,0,0,0,107,108,3,10,5,0,108,9,1,0,0,0,109,110,
        6,5,-1,0,110,111,3,12,6,0,111,117,1,0,0,0,112,113,10,2,0,0,113,114,
        7,2,0,0,114,116,3,10,5,3,115,112,1,0,0,0,116,119,1,0,0,0,117,115,
        1,0,0,0,117,118,1,0,0,0,118,11,1,0,0,0,119,117,1,0,0,0,120,121,6,
        6,-1,0,121,122,3,16,8,0,122,128,1,0,0,0,123,124,10,2,0,0,124,125,
        7,3,0,0,125,127,3,12,6,3,126,123,1,0,0,0,127,130,1,0,0,0,128,126,
        1,0,0,0,128,129,1,0,0,0,129,13,1,0,0,0,130,128,1,0,0,0,131,132,6,
        7,-1,0,132,133,3,18,9,0,133,139,1,0,0,0,134,135,10,2,0,0,135,136,
        7,3,0,0,136,138,3,14,7,3,137,134,1,0,0,0,138,141,1,0,0,0,139,137,
        1,0,0,0,139,140,1,0,0,0,140,15,1,0,0,0,141,139,1,0,0,0,142,143,7,
        2,0,0,143,150,3,16,8,0,144,146,3,20,10,0,145,144,1,0,0,0,146,147,
        1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,150,1,0,0,0,149,142,
        1,0,0,0,149,145,1,0,0,0,150,17,1,0,0,0,151,152,7,2,0,0,152,161,3,
        18,9,0,153,157,3,20,10,0,154,156,3,22,11,0,155,154,1,0,0,0,156,159,
        1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,161,1,0,0,0,159,157,
        1,0,0,0,160,151,1,0,0,0,160,153,1,0,0,0,161,19,1,0,0,0,162,166,3,
        32,16,0,163,165,3,24,12,0,164,163,1,0,0,0,165,168,1,0,0,0,166,164,
        1,0,0,0,166,167,1,0,0,0,167,21,1,0,0,0,168,166,1,0,0,0,169,173,3,
        34,17,0,170,172,3,24,12,0,171,170,1,0,0,0,172,175,1,0,0,0,173,171,
        1,0,0,0,173,174,1,0,0,0,174,23,1,0,0,0,175,173,1,0,0,0,176,179,5,
        90,0,0,177,179,3,26,13,0,178,176,1,0,0,0,178,177,1,0,0,0,179,25,
        1,0,0,0,180,186,5,27,0,0,181,187,3,30,15,0,182,187,3,28,14,0,183,
        184,3,30,15,0,184,185,3,28,14,0,185,187,1,0,0,0,186,181,1,0,0,0,
        186,182,1,0,0,0,186,183,1,0,0,0,187,27,1,0,0,0,188,189,5,74,0,0,
        189,192,5,21,0,0,190,193,3,8,4,0,191,193,3,6,3,0,192,190,1,0,0,0,
        192,191,1,0,0,0,193,194,1,0,0,0,194,195,5,22,0,0,195,29,1,0,0,0,
        196,197,5,75,0,0,197,200,5,21,0,0,198,201,3,8,4,0,199,201,3,6,3,
        0,200,198,1,0,0,0,200,199,1,0,0,0,201,202,1,0,0,0,202,203,5,22,0,
        0,203,31,1,0,0,0,204,205,6,16,-1,0,205,206,3,36,18,0,206,221,1,0,
        0,0,207,208,10,2,0,0,208,214,5,75,0,0,209,215,3,46,23,0,210,211,
        5,21,0,0,211,212,3,8,4,0,212,213,5,22,0,0,213,215,1,0,0,0,214,209,
        1,0,0,0,214,210,1,0,0,0,215,217,1,0,0,0,216,218,3,80,40,0,217,216,
        1,0,0,0,217,218,1,0,0,0,218,220,1,0,0,0,219,207,1,0,0,0,220,223,
        1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,33,1,0,0,0,223,221,1,
        0,0,0,224,225,6,17,-1,0,225,226,3,38,19,0,226,241,1,0,0,0,227,228,
        10,2,0,0,228,234,5,75,0,0,229,235,3,46,23,0,230,231,5,21,0,0,231,
        232,3,8,4,0,232,233,5,22,0,0,233,235,1,0,0,0,234,229,1,0,0,0,234,
        230,1,0,0,0,235,237,1,0,0,0,236,238,3,80,40,0,237,236,1,0,0,0,237,
        238,1,0,0,0,238,240,1,0,0,0,239,227,1,0,0,0,240,243,1,0,0,0,241,
        239,1,0,0,0,241,242,1,0,0,0,242,35,1,0,0,0,243,241,1,0,0,0,244,251,
        3,40,20,0,245,251,3,42,21,0,246,251,3,70,35,0,247,251,3,46,23,0,
        248,251,3,64,32,0,249,251,3,66,33,0,250,244,1,0,0,0,250,245,1,0,
        0,0,250,246,1,0,0,0,250,247,1,0,0,0,250,248,1,0,0,0,250,249,1,0,
        0,0,251,37,1,0,0,0,252,258,3,40,20,0,253,258,3,42,21,0,254,258,3,
        46,23,0,255,258,3,64,32,0,256,258,3,66,33,0,257,252,1,0,0,0,257,
        253,1,0,0,0,257,254,1,0,0,0,257,255,1,0,0,0,257,256,1,0,0,0,258,
        39,1,0,0,0,259,260,5,19,0,0,260,261,3,8,4,0,261,262,5,20,0,0,262,
        276,1,0,0,0,263,264,5,25,0,0,264,265,3,8,4,0,265,266,5,26,0,0,266,
        276,1,0,0,0,267,268,5,21,0,0,268,269,3,8,4,0,269,270,5,22,0,0,270,
        276,1,0,0,0,271,272,5,23,0,0,272,273,3,8,4,0,273,274,5,24,0,0,274,
        276,1,0,0,0,275,259,1,0,0,0,275,263,1,0,0,0,275,267,1,0,0,0,275,
        271,1,0,0,0,276,41,1,0,0,0,277,278,5,27,0,0,278,279,3,8,4,0,279,
        280,5,27,0,0,280,43,1,0,0,0,281,283,5,79,0,0,282,281,1,0,0,0,283,
        284,1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,292,1,0,0,0,286,
        287,5,1,0,0,287,288,5,79,0,0,288,289,5,79,0,0,289,291,5,79,0,0,290,
        286,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,
        301,1,0,0,0,294,292,1,0,0,0,295,297,5,2,0,0,296,298,5,79,0,0,297,
        296,1,0,0,0,298,299,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,
        302,1,0,0,0,301,295,1,0,0,0,301,302,1,0,0,0,302,45,1,0,0,0,303,316,
        7,4,0,0,304,306,3,80,40,0,305,304,1,0,0,0,305,306,1,0,0,0,306,308,
        1,0,0,0,307,309,5,91,0,0,308,307,1,0,0,0,308,309,1,0,0,0,309,317,
        1,0,0,0,310,312,5,91,0,0,311,310,1,0,0,0,311,312,1,0,0,0,312,314,
        1,0,0,0,313,315,3,80,40,0,314,313,1,0,0,0,314,315,1,0,0,0,315,317,
        1,0,0,0,316,305,1,0,0,0,316,311,1,0,0,0,317,327,1,0,0,0,318,327,
        3,44,22,0,319,327,5,77,0,0,320,327,3,52,26,0,321,327,3,56,28,0,322,
        327,3,60,30,0,323,327,3,62,31,0,324,327,3,48,24,0,325,327,3,50,25,
        0,326,303,1,0,0,0,326,318,1,0,0,0,326,319,1,0,0,0,326,320,1,0,0,
        0,326,321,1,0,0,0,326,322,1,0,0,0,326,323,1,0,0,0,326,324,1,0,0,
        0,326,325,1,0,0,0,327,47,1,0,0,0,328,329,5,30,0,0,329,330,3,8,4,
        0,330,331,7,5,0,0,331,49,1,0,0,0,332,333,7,6,0,0,333,334,3,8,4,0,
        334,335,5,31,0,0,335,51,1,0,0,0,336,337,5,73,0,0,337,338,5,21,0,
        0,338,339,3,54,27,0,339,340,5,22,0,0,340,53,1,0,0,0,341,345,5,78,
        0,0,342,345,5,79,0,0,343,345,3,0,0,0,344,341,1,0,0,0,344,342,1,0,
        0,0,344,343,1,0,0,0,345,348,1,0,0,0,346,344,1,0,0,0,346,347,1,0,
        0,0,347,55,1,0,0,0,348,346,1,0,0,0,349,350,5,72,0,0,350,351,5,21,
        0,0,351,352,3,58,29,0,352,353,5,22,0,0,353,57,1,0,0,0,354,358,5,
        78,0,0,355,358,5,79,0,0,356,358,3,0,0,0,357,354,1,0,0,0,357,355,
        1,0,0,0,357,356,1,0,0,0,358,361,1,0,0,0,359,357,1,0,0,0,359,360,
        1,0,0,0,360,59,1,0,0,0,361,359,1,0,0,0,362,368,5,68,0,0,363,369,
        5,79,0,0,364,365,5,21,0,0,365,366,3,8,4,0,366,367,5,22,0,0,367,369,
        1,0,0,0,368,363,1,0,0,0,368,364,1,0,0,0,369,375,1,0,0,0,370,376,
        5,79,0,0,371,372,5,21,0,0,372,373,3,8,4,0,373,374,5,22,0,0,374,376,
        1,0,0,0,375,370,1,0,0,0,375,371,1,0,0,0,376,61,1,0,0,0,377,378,7,
        7,0,0,378,379,5,21,0,0,379,380,3,8,4,0,380,381,5,22,0,0,381,382,
        5,21,0,0,382,383,3,8,4,0,383,384,5,22,0,0,384,63,1,0,0,0,385,386,
        5,59,0,0,386,387,3,8,4,0,387,388,5,60,0,0,388,65,1,0,0,0,389,390,
        5,61,0,0,390,391,3,8,4,0,391,392,5,62,0,0,392,67,1,0,0,0,393,394,
        7,8,0,0,394,69,1,0,0,0,395,408,3,68,34,0,396,398,3,80,40,0,397,396,
        1,0,0,0,397,398,1,0,0,0,398,400,1,0,0,0,399,401,3,82,41,0,400,399,
        1,0,0,0,400,401,1,0,0,0,401,409,1,0,0,0,402,404,3,82,41,0,403,402,
        1,0,0,0,403,404,1,0,0,0,404,406,1,0,0,0,405,407,3,80,40,0,406,405,
        1,0,0,0,406,407,1,0,0,0,407,409,1,0,0,0,408,397,1,0,0,0,408,403,
        1,0,0,0,409,411,1,0,0,0,410,412,5,21,0,0,411,410,1,0,0,0,411,412,
        1,0,0,0,412,418,1,0,0,0,413,414,5,19,0,0,414,415,3,76,38,0,415,416,
        5,20,0,0,416,419,1,0,0,0,417,419,3,78,39,0,418,413,1,0,0,0,418,417,
        1,0,0,0,419,421,1,0,0,0,420,422,5,22,0,0,421,420,1,0,0,0,421,422,
        1,0,0,0,422,496,1,0,0,0,423,436,7,4,0,0,424,426,3,80,40,0,425,424,
        1,0,0,0,425,426,1,0,0,0,426,428,1,0,0,0,427,429,5,91,0,0,428,427,
        1,0,0,0,428,429,1,0,0,0,429,437,1,0,0,0,430,432,5,91,0,0,431,430,
        1,0,0,0,431,432,1,0,0,0,432,434,1,0,0,0,433,435,3,80,40,0,434,433,
        1,0,0,0,434,435,1,0,0,0,435,437,1,0,0,0,436,425,1,0,0,0,436,431,
        1,0,0,0,437,439,1,0,0,0,438,440,5,21,0,0,439,438,1,0,0,0,439,440,
        1,0,0,0,440,441,1,0,0,0,441,442,5,19,0,0,442,443,3,72,36,0,443,445,
        5,20,0,0,444,446,5,22,0,0,445,444,1,0,0,0,445,446,1,0,0,0,446,496,
        1,0,0,0,447,454,5,34,0,0,448,449,3,80,40,0,449,450,3,82,41,0,450,
        455,1,0,0,0,451,452,3,82,41,0,452,453,3,80,40,0,453,455,1,0,0,0,
        454,448,1,0,0,0,454,451,1,0,0,0,454,455,1,0,0,0,455,462,1,0,0,0,
        456,458,3,10,5,0,457,456,1,0,0,0,457,458,1,0,0,0,458,459,1,0,0,0,
        459,463,5,77,0,0,460,463,3,60,30,0,461,463,3,10,5,0,462,457,1,0,
        0,0,462,460,1,0,0,0,462,461,1,0,0,0,463,496,1,0,0,0,464,469,5,63,
        0,0,465,466,5,25,0,0,466,467,3,8,4,0,467,468,5,26,0,0,468,470,1,
        0,0,0,469,465,1,0,0,0,469,470,1,0,0,0,470,471,1,0,0,0,471,472,5,
        21,0,0,472,473,3,8,4,0,473,474,5,22,0,0,474,496,1,0,0,0,475,476,
        5,64,0,0,476,477,5,21,0,0,477,478,3,8,4,0,478,479,5,22,0,0,479,496,
        1,0,0,0,480,487,7,9,0,0,481,482,3,84,42,0,482,483,3,82,41,0,483,
        488,1,0,0,0,484,485,3,82,41,0,485,486,3,84,42,0,486,488,1,0,0,0,
        487,481,1,0,0,0,487,484,1,0,0,0,488,489,1,0,0,0,489,490,3,12,6,0,
        490,496,1,0,0,0,491,492,5,32,0,0,492,493,3,74,37,0,493,494,3,12,
        6,0,494,496,1,0,0,0,495,395,1,0,0,0,495,423,1,0,0,0,495,447,1,0,
        0,0,495,464,1,0,0,0,495,475,1,0,0,0,495,480,1,0,0,0,495,491,1,0,
        0,0,496,71,1,0,0,0,497,498,3,8,4,0,498,499,5,1,0,0,499,500,3,72,
        36,0,500,503,1,0,0,0,501,503,3,8,4,0,502,497,1,0,0,0,502,501,1,0,
        0,0,503,73,1,0,0,0,504,505,5,74,0,0,505,506,5,21,0,0,506,507,7,4,
        0,0,507,508,5,33,0,0,508,517,3,8,4,0,509,515,5,75,0,0,510,511,5,
        21,0,0,511,512,7,2,0,0,512,516,5,22,0,0,513,516,5,15,0,0,514,516,
        5,16,0,0,515,510,1,0,0,0,515,513,1,0,0,0,515,514,1,0,0,0,516,518,
        1,0,0,0,517,509,1,0,0,0,517,518,1,0,0,0,518,519,1,0,0,0,519,520,
        5,22,0,0,520,75,1,0,0,0,521,527,3,8,4,0,522,523,3,8,4,0,523,524,
        5,1,0,0,524,525,3,76,38,0,525,527,1,0,0,0,526,521,1,0,0,0,526,522,
        1,0,0,0,527,77,1,0,0,0,528,529,3,14,7,0,529,79,1,0,0,0,530,536,5,
        74,0,0,531,537,3,46,23,0,532,533,5,21,0,0,533,534,3,8,4,0,534,535,
        5,22,0,0,535,537,1,0,0,0,536,531,1,0,0,0,536,532,1,0,0,0,537,81,
        1,0,0,0,538,544,5,75,0,0,539,545,3,46,23,0,540,541,5,21,0,0,541,
        542,3,8,4,0,542,543,5,22,0,0,543,545,1,0,0,0,544,539,1,0,0,0,544,
        540,1,0,0,0,545,83,1,0,0,0,546,547,5,74,0,0,547,548,5,21,0,0,548,
        549,3,6,3,0,549,550,5,22,0,0,550,85,1,0,0,0,551,552,5,74,0,0,552,
        553,5,21,0,0,553,554,3,6,3,0,554,555,5,22,0,0,555,87,1,0,0,0,66,
        100,117,128,139,147,149,157,160,166,173,178,186,192,200,214,217,
        221,234,237,241,250,257,275,284,292,299,301,305,308,311,314,316,
        326,344,346,357,359,368,375,397,400,403,406,408,411,418,421,425,
        428,431,434,436,439,445,454,457,462,469,487,495,502,515,517,526,
        536,544
    ]

class LaTeXParser ( Parser ):

    grammarFileName = "LaTeX.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "','", "'.'", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "'\\quad'", "'\\qquad'",
                     "<INVALID>", "'\\negmedspace'", "'\\negthickspace'",
                     "'\\left'", "'\\right'", "<INVALID>", "'+'", "'-'",
                     "'*'", "'/'", "'('", "')'", "'{'", "'}'", "'\\{'",
                     "'\\}'", "'['", "']'", "'|'", "'\\right|'", "'\\left|'",
                     "'\\langle'", "'\\rangle'", "'\\lim'", "<INVALID>",
                     "<INVALID>", "'\\sum'", "'\\prod'", "'\\exp'", "'\\log'",
                     "'\\lg'", "'\\ln'", "'\\sin'", "'\\cos'", "'\\tan'",
                     "'\\csc'", "'\\sec'", "'\\cot'", "'\\arcsin'", "'\\arccos'",
                     "'\\arctan'", "'\\arccsc'", "'\\arcsec'", "'\\arccot'",
                     "'\\sinh'", "'\\cosh'", "'\\tanh'", "'\\arsinh'", "'\\arcosh'",
                     "'\\artanh'", "'\\lfloor'", "'\\rfloor'", "'\\lceil'",
                     "'\\rceil'", "'\\sqrt'", "'\\overline'", "'\\times'",
                     "'\\cdot'", "'\\div'", "<INVALID>", "'\\binom'", "'\\dbinom'",
                     "'\\tbinom'", "'\\text'", "'\\mathit'", "'_'", "'^'",
                     "':'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "'\\neq'", "'<'", "<INVALID>", "'\\leqq'", "'\\leqslant'",
                     "'>'", "<INVALID>", "'\\geqq'", "'\\geqslant'", "'!'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "WS", "THINSPACE",
                      "MEDSPACE", "THICKSPACE", "QUAD", "QQUAD", "NEGTHINSPACE",
                      "NEGMEDSPACE", "NEGTHICKSPACE", "CMD_LEFT", "CMD_RIGHT",
                      "IGNORE", "ADD", "SUB", "MUL", "DIV", "L_PAREN", "R_PAREN",
                      "L_BRACE", "R_BRACE", "L_BRACE_LITERAL", "R_BRACE_LITERAL",
                      "L_BRACKET", "R_BRACKET", "BAR", "R_BAR", "L_BAR",
                      "L_ANGLE", "R_ANGLE", "FUNC_LIM", "LIM_APPROACH_SYM",
                      "FUNC_INT", "FUNC_SUM", "FUNC_PROD", "FUNC_EXP", "FUNC_LOG",
                      "FUNC_LG", "FUNC_LN", "FUNC_SIN", "FUNC_COS", "FUNC_TAN",
                      "FUNC_CSC", "FUNC_SEC", "FUNC_COT", "FUNC_ARCSIN",
                      "FUNC_ARCCOS", "FUNC_ARCTAN", "FUNC_ARCCSC", "FUNC_ARCSEC",
                      "FUNC_ARCCOT", "FUNC_SINH", "FUNC_COSH", "FUNC_TANH",
                      "FUNC_ARSINH", "FUNC_ARCOSH", "FUNC_ARTANH", "L_FLOOR",
                      "R_FLOOR", "L_CEIL", "R_CEIL", "FUNC_SQRT", "FUNC_OVERLINE",
                      "CMD_TIMES", "CMD_CDOT", "CMD_DIV", "CMD_FRAC", "CMD_BINOM",
                      "CMD_DBINOM", "CMD_TBINOM", "CMD_TEXT", "CMD_MATHIT",
                      "UNDERSCORE", "CARET", "COLON", "DIFFERENTIAL", "LETTER",
                      "DIGIT", "EQUAL", "NEQ", "LT", "LTE", "LTE_Q", "LTE_S",
                      "GT", "GTE", "GTE_Q", "GTE_S", "BANG", "SINGLE_QUOTES",
                      "SYMBOL" ]

    RULE_special = 0
    RULE_math = 1
    RULE_relation = 2
    RULE_equality = 3
    RULE_expr = 4
    RULE_additive = 5
    RULE_mp = 6
    RULE_mp_nofunc = 7
    RULE_unary = 8
    RULE_unary_nofunc = 9
    RULE_postfix = 10
    RULE_postfix_nofunc = 11
    RULE_postfix_op = 12
    RULE_eval_at = 13
    RULE_eval_at_sub = 14
    RULE_eval_at_sup = 15
    RULE_exp = 16
    RULE_exp_nofunc = 17
    RULE_comp = 18
    RULE_comp_nofunc = 19
    RULE_group = 20
    RULE_abs_group = 21
    RULE_number = 22
    RULE_atom = 23
    RULE_bra = 24
    RULE_ket = 25
    RULE_mathit = 26
    RULE_mathit_text = 27
    RULE_text = 28
    RULE_text_text = 29
    RULE_frac = 30
    RULE_binom = 31
    RULE_floor = 32
    RULE_ceil = 33
    RULE_func_normal = 34
    RULE_func = 35
    RULE_args = 36
    RULE_limit_sub = 37
    RULE_func_arg = 38
    RULE_func_arg_noparens = 39
    RULE_subexpr = 40
    RULE_supexpr = 41
    RULE_subeq = 42
    RULE_supeq = 43

    ruleNames =  [ "special", "math", "relation", "equality", "expr", "additive",
                   "mp", "mp_nofunc", "unary", "unary_nofunc", "postfix",
                   "postfix_nofunc", "postfix_op", "eval_at", "eval_at_sub",
                   "eval_at_sup", "exp", "exp_nofunc", "comp", "comp_nofunc",
                   "group", "abs_group", "number", "atom", "bra", "ket",
                   "mathit", "mathit_text", "text", "text_text", "frac",
                   "binom", "floor", "ceil", "func_normal", "func", "args",
                   "limit_sub", "func_arg", "func_arg_noparens", "subexpr",
                   "supexpr", "subeq", "supeq" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    WS=3
    THINSPACE=4
    MEDSPACE=5
    THICKSPACE=6
    QUAD=7
    QQUAD=8
    NEGTHINSPACE=9
    NEGMEDSPACE=10
    NEGTHICKSPACE=11
    CMD_LEFT=12
    CMD_RIGHT=13
    IGNORE=14
    ADD=15
    SUB=16
    MUL=17
    DIV=18
    L_PAREN=19
    R_PAREN=20
    L_BRACE=21
    R_BRACE=22
    L_BRACE_LITERAL=23
    R_BRACE_LITERAL=24
    L_BRACKET=25
    R_BRACKET=26
    BAR=27
    R_BAR=28
    L_BAR=29
    L_ANGLE=30
    R_ANGLE=31
    FUNC_LIM=32
    LIM_APPROACH_SYM=33
    FUNC_INT=34
    FUNC_SUM=35
    FUNC_PROD=36
    FUNC_EXP=37
    FUNC_LOG=38
    FUNC_LG=39
    FUNC_LN=40
    FUNC_SIN=41
    FUNC_COS=42
    FUNC_TAN=43
    FUNC_CSC=44
    FUNC_SEC=45
    FUNC_COT=46
    FUNC_ARCSIN=47
    FUNC_ARCCOS=48
    FUNC_ARCTAN=49
    FUNC_ARCCSC=50
    FUNC_ARCSEC=51
    FUNC_ARCCOT=52
    FUNC_SINH=53
    FUNC_COSH=54
    FUNC_TANH=55
    FUNC_ARSINH=56
    FUNC_ARCOSH=57
    FUNC_ARTANH=58
    L_FLOOR=59
    R_FLOOR=60
    L_CEIL=61
    R_CEIL=62
    FUNC_SQRT=63
    FUNC_OVERLINE=64
    CMD_TIMES=65
    CMD_CDOT=66
    CMD_DIV=67
    CMD_FRAC=68
    CMD_BINOM=69
    CMD_DBINOM=70
    CMD_TBINOM=71
    CMD_TEXT=72
    CMD_MATHIT=73
    UNDERSCORE=74
    CARET=75
    COLON=76
    DIFFERENTIAL=77
    LETTER=78
    DIGIT=79
    EQUAL=80
    NEQ=81
    LT=82
    LTE=83
    LTE_Q=84
    LTE_S=85
    GT=86
    GTE=87
    GTE_Q=88
    GTE_S=89
    BANG=90
    SINGLE_QUOTES=91
    SYMBOL=92

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SpecialContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GT(self):
            return self.getToken(LaTeXParser.GT, 0)

        def GTE(self):
            return self.getToken(LaTeXParser.GTE, 0)

        def LT(self):
            return self.getToken(LaTeXParser.LT, 0)

        def LTE(self):
            return self.getToken(LaTeXParser.LTE, 0)

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def L_BRACKET(self):
            return self.getToken(LaTeXParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(LaTeXParser.R_BRACKET, 0)

        def COLON(self):
            return self.getToken(LaTeXParser.COLON, 0)

        def BANG(self):
            return self.getToken(LaTeXParser.BANG, 0)

        def EQUAL(self):
            return self.getToken(LaTeXParser.EQUAL, 0)

        def NEQ(self):
            return self.getToken(LaTeXParser.NEQ, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_special




    def special(self):

        localctx = LaTeXParser.SpecialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_special)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 88
            _la = self._input.LA(1)
            if not(_la==25 or _la==26 or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 78789) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relation(self):
            return self.getTypedRuleContext(LaTeXParser.RelationContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_math




    def math(self):

        localctx = LaTeXParser.MathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_math)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 90
            self.relation(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.RelationContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.RelationContext,i)


        def EQUAL(self):
            return self.getToken(LaTeXParser.EQUAL, 0)

        def LT(self):
            return self.getToken(LaTeXParser.LT, 0)

        def LTE(self):
            return self.getToken(LaTeXParser.LTE, 0)

        def GT(self):
            return self.getToken(LaTeXParser.GT, 0)

        def GTE(self):
            return self.getToken(LaTeXParser.GTE, 0)

        def NEQ(self):
            return self.getToken(LaTeXParser.NEQ, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_relation



    def relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.RelationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 4
        self.enterRecursionRule(localctx, 4, self.RULE_relation, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 93
            self.expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 100
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.RelationContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
                    self.state = 95
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 96
                    _la = self._input.LA(1)
                    if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 207) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 97
                    self.relation(3)
                self.state = 102
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EqualityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def EQUAL(self):
            return self.getToken(LaTeXParser.EQUAL, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_equality




    def equality(self):

        localctx = LaTeXParser.EqualityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_equality)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 103
            self.expr()
            self.state = 104
            self.match(LaTeXParser.EQUAL)
            self.state = 105
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive(self):
            return self.getTypedRuleContext(LaTeXParser.AdditiveContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_expr




    def expr(self):

        localctx = LaTeXParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 107
            self.additive(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp(self):
            return self.getTypedRuleContext(LaTeXParser.MpContext,0)


        def additive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.AdditiveContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.AdditiveContext,i)


        def ADD(self):
            return self.getToken(LaTeXParser.ADD, 0)

        def SUB(self):
            return self.getToken(LaTeXParser.SUB, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_additive



    def additive(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.AdditiveContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 10
        self.enterRecursionRule(localctx, 10, self.RULE_additive, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 110
            self.mp(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 117
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.AdditiveContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additive)
                    self.state = 112
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 113
                    _la = self._input.LA(1)
                    if not(_la==15 or _la==16):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 114
                    self.additive(3)
                self.state = 119
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(LaTeXParser.UnaryContext,0)


        def mp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.MpContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.MpContext,i)


        def MUL(self):
            return self.getToken(LaTeXParser.MUL, 0)

        def CMD_TIMES(self):
            return self.getToken(LaTeXParser.CMD_TIMES, 0)

        def CMD_CDOT(self):
            return self.getToken(LaTeXParser.CMD_CDOT, 0)

        def DIV(self):
            return self.getToken(LaTeXParser.DIV, 0)

        def CMD_DIV(self):
            return self.getToken(LaTeXParser.CMD_DIV, 0)

        def COLON(self):
            return self.getToken(LaTeXParser.COLON, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_mp



    def mp(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.MpContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 12
        self.enterRecursionRule(localctx, 12, self.RULE_mp, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 121
            self.unary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 128
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.MpContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mp)
                    self.state = 123
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 124
                    _la = self._input.LA(1)
                    if not(((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 578431077140398083) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 125
                    self.mp(3)
                self.state = 130
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Mp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext,0)


        def mp_nofunc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Mp_nofuncContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Mp_nofuncContext,i)


        def MUL(self):
            return self.getToken(LaTeXParser.MUL, 0)

        def CMD_TIMES(self):
            return self.getToken(LaTeXParser.CMD_TIMES, 0)

        def CMD_CDOT(self):
            return self.getToken(LaTeXParser.CMD_CDOT, 0)

        def DIV(self):
            return self.getToken(LaTeXParser.DIV, 0)

        def CMD_DIV(self):
            return self.getToken(LaTeXParser.CMD_DIV, 0)

        def COLON(self):
            return self.getToken(LaTeXParser.COLON, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_mp_nofunc



    def mp_nofunc(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.Mp_nofuncContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 14
        self.enterRecursionRule(localctx, 14, self.RULE_mp_nofunc, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 132
            self.unary_nofunc()
            self._ctx.stop = self._input.LT(-1)
            self.state = 139
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.Mp_nofuncContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mp_nofunc)
                    self.state = 134
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 135
                    _la = self._input.LA(1)
                    if not(((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 578431077140398083) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 136
                    self.mp_nofunc(3)
                self.state = 141
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(LaTeXParser.UnaryContext,0)


        def ADD(self):
            return self.getToken(LaTeXParser.ADD, 0)

        def SUB(self):
            return self.getToken(LaTeXParser.SUB, 0)

        def postfix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.PostfixContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.PostfixContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_unary




    def unary(self):

        localctx = LaTeXParser.UnaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_unary)
        self._la = 0 # Token type
        try:
            self.state = 149
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 142
                _la = self._input.LA(1)
                if not(_la==15 or _la==16):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 143
                self.unary()
                pass
            elif token in [19, 21, 23, 25, 27, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 68, 69, 70, 71, 72, 73, 77, 78, 79, 92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 145
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 144
                        self.postfix()

                    else:
                        raise NoViableAltException(self)
                    self.state = 147
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Unary_nofuncContext,0)


        def ADD(self):
            return self.getToken(LaTeXParser.ADD, 0)

        def SUB(self):
            return self.getToken(LaTeXParser.SUB, 0)

        def postfix(self):
            return self.getTypedRuleContext(LaTeXParser.PostfixContext,0)


        def postfix_nofunc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Postfix_nofuncContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Postfix_nofuncContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_unary_nofunc




    def unary_nofunc(self):

        localctx = LaTeXParser.Unary_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_unary_nofunc)
        self._la = 0 # Token type
        try:
            self.state = 160
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15, 16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 151
                _la = self._input.LA(1)
                if not(_la==15 or _la==16):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 152
                self.unary_nofunc()
                pass
            elif token in [19, 21, 23, 25, 27, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 68, 69, 70, 71, 72, 73, 77, 78, 79, 92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 153
                self.postfix()
                self.state = 157
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 154
                        self.postfix_nofunc()
                    self.state = 159
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp(self):
            return self.getTypedRuleContext(LaTeXParser.ExpContext,0)


        def postfix_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Postfix_opContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_postfix




    def postfix(self):

        localctx = LaTeXParser.PostfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_postfix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 162
            self.exp(0)
            self.state = 166
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 163
                    self.postfix_op()
                self.state = 168
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exp_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext,0)


        def postfix_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.Postfix_opContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.Postfix_opContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_postfix_nofunc




    def postfix_nofunc(self):

        localctx = LaTeXParser.Postfix_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_postfix_nofunc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 169
            self.exp_nofunc(0)
            self.state = 173
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 170
                    self.postfix_op()
                self.state = 175
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Postfix_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BANG(self):
            return self.getToken(LaTeXParser.BANG, 0)

        def eval_at(self):
            return self.getTypedRuleContext(LaTeXParser.Eval_atContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_postfix_op




    def postfix_op(self):

        localctx = LaTeXParser.Postfix_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_postfix_op)
        try:
            self.state = 178
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [90]:
                self.enterOuterAlt(localctx, 1)
                self.state = 176
                self.match(LaTeXParser.BANG)
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 2)
                self.state = 177
                self.eval_at()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_atContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAR(self):
            return self.getToken(LaTeXParser.BAR, 0)

        def eval_at_sup(self):
            return self.getTypedRuleContext(LaTeXParser.Eval_at_supContext,0)


        def eval_at_sub(self):
            return self.getTypedRuleContext(LaTeXParser.Eval_at_subContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_eval_at




    def eval_at(self):

        localctx = LaTeXParser.Eval_atContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_eval_at)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 180
            self.match(LaTeXParser.BAR)
            self.state = 186
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 181
                self.eval_at_sup()
                pass

            elif la_ == 2:
                self.state = 182
                self.eval_at_sub()
                pass

            elif la_ == 3:
                self.state = 183
                self.eval_at_sup()
                self.state = 184
                self.eval_at_sub()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_at_subContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def equality(self):
            return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_eval_at_sub




    def eval_at_sub(self):

        localctx = LaTeXParser.Eval_at_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_eval_at_sub)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 188
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 189
            self.match(LaTeXParser.L_BRACE)
            self.state = 192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 190
                self.expr()
                pass

            elif la_ == 2:
                self.state = 191
                self.equality()
                pass


            self.state = 194
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_at_supContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def equality(self):
            return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_eval_at_sup




    def eval_at_sup(self):

        localctx = LaTeXParser.Eval_at_supContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_eval_at_sup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 196
            self.match(LaTeXParser.CARET)
            self.state = 197
            self.match(LaTeXParser.L_BRACE)
            self.state = 200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 198
                self.expr()
                pass

            elif la_ == 2:
                self.state = 199
                self.equality()
                pass


            self.state = 202
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp(self):
            return self.getTypedRuleContext(LaTeXParser.CompContext,0)


        def exp(self):
            return self.getTypedRuleContext(LaTeXParser.ExpContext,0)


        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def subexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_exp



    def exp(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.ExpContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 32
        self.enterRecursionRule(localctx, 32, self.RULE_exp, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 205
            self.comp()
            self._ctx.stop = self._input.LT(-1)
            self.state = 221
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.ExpContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exp)
                    self.state = 207
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 208
                    self.match(LaTeXParser.CARET)
                    self.state = 214
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [27, 29, 30, 68, 69, 70, 71, 72, 73, 77, 78, 79, 92]:
                        self.state = 209
                        self.atom()
                        pass
                    elif token in [21]:
                        self.state = 210
                        self.match(LaTeXParser.L_BRACE)
                        self.state = 211
                        self.expr()
                        self.state = 212
                        self.match(LaTeXParser.R_BRACE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 217
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                    if la_ == 1:
                        self.state = 216
                        self.subexpr()


                self.state = 223
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Exp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Comp_nofuncContext,0)


        def exp_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Exp_nofuncContext,0)


        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def subexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_exp_nofunc



    def exp_nofunc(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LaTeXParser.Exp_nofuncContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 34
        self.enterRecursionRule(localctx, 34, self.RULE_exp_nofunc, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.comp_nofunc()
            self._ctx.stop = self._input.LT(-1)
            self.state = 241
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = LaTeXParser.Exp_nofuncContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exp_nofunc)
                    self.state = 227
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 228
                    self.match(LaTeXParser.CARET)
                    self.state = 234
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [27, 29, 30, 68, 69, 70, 71, 72, 73, 77, 78, 79, 92]:
                        self.state = 229
                        self.atom()
                        pass
                    elif token in [21]:
                        self.state = 230
                        self.match(LaTeXParser.L_BRACE)
                        self.state = 231
                        self.expr()
                        self.state = 232
                        self.match(LaTeXParser.R_BRACE)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 237
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                    if la_ == 1:
                        self.state = 236
                        self.subexpr()


                self.state = 243
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self):
            return self.getTypedRuleContext(LaTeXParser.GroupContext,0)


        def abs_group(self):
            return self.getTypedRuleContext(LaTeXParser.Abs_groupContext,0)


        def func(self):
            return self.getTypedRuleContext(LaTeXParser.FuncContext,0)


        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def floor(self):
            return self.getTypedRuleContext(LaTeXParser.FloorContext,0)


        def ceil(self):
            return self.getTypedRuleContext(LaTeXParser.CeilContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_comp




    def comp(self):

        localctx = LaTeXParser.CompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_comp)
        try:
            self.state = 250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 244
                self.group()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 245
                self.abs_group()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 246
                self.func()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 247
                self.atom()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 248
                self.floor()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 249
                self.ceil()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_nofuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group(self):
            return self.getTypedRuleContext(LaTeXParser.GroupContext,0)


        def abs_group(self):
            return self.getTypedRuleContext(LaTeXParser.Abs_groupContext,0)


        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def floor(self):
            return self.getTypedRuleContext(LaTeXParser.FloorContext,0)


        def ceil(self):
            return self.getTypedRuleContext(LaTeXParser.CeilContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_comp_nofunc




    def comp_nofunc(self):

        localctx = LaTeXParser.Comp_nofuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_comp_nofunc)
        try:
            self.state = 257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 252
                self.group()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 253
                self.abs_group()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 254
                self.atom()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 255
                self.floor()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 256
                self.ceil()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(LaTeXParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(LaTeXParser.R_PAREN, 0)

        def L_BRACKET(self):
            return self.getToken(LaTeXParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(LaTeXParser.R_BRACKET, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def L_BRACE_LITERAL(self):
            return self.getToken(LaTeXParser.L_BRACE_LITERAL, 0)

        def R_BRACE_LITERAL(self):
            return self.getToken(LaTeXParser.R_BRACE_LITERAL, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_group




    def group(self):

        localctx = LaTeXParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_group)
        try:
            self.state = 275
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19]:
                self.enterOuterAlt(localctx, 1)
                self.state = 259
                self.match(LaTeXParser.L_PAREN)
                self.state = 260
                self.expr()
                self.state = 261
                self.match(LaTeXParser.R_PAREN)
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 263
                self.match(LaTeXParser.L_BRACKET)
                self.state = 264
                self.expr()
                self.state = 265
                self.match(LaTeXParser.R_BRACKET)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 3)
                self.state = 267
                self.match(LaTeXParser.L_BRACE)
                self.state = 268
                self.expr()
                self.state = 269
                self.match(LaTeXParser.R_BRACE)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 4)
                self.state = 271
                self.match(LaTeXParser.L_BRACE_LITERAL)
                self.state = 272
                self.expr()
                self.state = 273
                self.match(LaTeXParser.R_BRACE_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Abs_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAR(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.BAR)
            else:
                return self.getToken(LaTeXParser.BAR, i)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_abs_group




    def abs_group(self):

        localctx = LaTeXParser.Abs_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_abs_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.match(LaTeXParser.BAR)
            self.state = 278
            self.expr()
            self.state = 279
            self.match(LaTeXParser.BAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.DIGIT)
            else:
                return self.getToken(LaTeXParser.DIGIT, i)

        def getRuleIndex(self):
            return LaTeXParser.RULE_number




    def number(self):

        localctx = LaTeXParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 281
                    self.match(LaTeXParser.DIGIT)

                else:
                    raise NoViableAltException(self)
                self.state = 284
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

            self.state = 292
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 286
                    self.match(LaTeXParser.T__0)
                    self.state = 287
                    self.match(LaTeXParser.DIGIT)
                    self.state = 288
                    self.match(LaTeXParser.DIGIT)
                    self.state = 289
                    self.match(LaTeXParser.DIGIT)
                self.state = 294
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

            self.state = 301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 295
                self.match(LaTeXParser.T__1)
                self.state = 297
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 296
                        self.match(LaTeXParser.DIGIT)

                    else:
                        raise NoViableAltException(self)
                    self.state = 299
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,25,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER(self):
            return self.getToken(LaTeXParser.LETTER, 0)

        def SYMBOL(self):
            return self.getToken(LaTeXParser.SYMBOL, 0)

        def subexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)


        def SINGLE_QUOTES(self):
            return self.getToken(LaTeXParser.SINGLE_QUOTES, 0)

        def number(self):
            return self.getTypedRuleContext(LaTeXParser.NumberContext,0)


        def DIFFERENTIAL(self):
            return self.getToken(LaTeXParser.DIFFERENTIAL, 0)

        def mathit(self):
            return self.getTypedRuleContext(LaTeXParser.MathitContext,0)


        def text(self):
            return self.getTypedRuleContext(LaTeXParser.TextContext,0)


        def frac(self):
            return self.getTypedRuleContext(LaTeXParser.FracContext,0)


        def binom(self):
            return self.getTypedRuleContext(LaTeXParser.BinomContext,0)


        def bra(self):
            return self.getTypedRuleContext(LaTeXParser.BraContext,0)


        def ket(self):
            return self.getTypedRuleContext(LaTeXParser.KetContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_atom




    def atom(self):

        localctx = LaTeXParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78, 92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 303
                _la = self._input.LA(1)
                if not(_la==78 or _la==92):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 316
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 305
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                    if la_ == 1:
                        self.state = 304
                        self.subexpr()


                    self.state = 308
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                    if la_ == 1:
                        self.state = 307
                        self.match(LaTeXParser.SINGLE_QUOTES)


                    pass

                elif la_ == 2:
                    self.state = 311
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                    if la_ == 1:
                        self.state = 310
                        self.match(LaTeXParser.SINGLE_QUOTES)


                    self.state = 314
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                    if la_ == 1:
                        self.state = 313
                        self.subexpr()


                    pass


                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 318
                self.number()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 3)
                self.state = 319
                self.match(LaTeXParser.DIFFERENTIAL)
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 4)
                self.state = 320
                self.mathit()
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 5)
                self.state = 321
                self.text()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 6)
                self.state = 322
                self.frac()
                pass
            elif token in [69, 70, 71]:
                self.enterOuterAlt(localctx, 7)
                self.state = 323
                self.binom()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 8)
                self.state = 324
                self.bra()
                pass
            elif token in [27, 29]:
                self.enterOuterAlt(localctx, 9)
                self.state = 325
                self.ket()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BraContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_ANGLE(self):
            return self.getToken(LaTeXParser.L_ANGLE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BAR(self):
            return self.getToken(LaTeXParser.R_BAR, 0)

        def BAR(self):
            return self.getToken(LaTeXParser.BAR, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_bra




    def bra(self):

        localctx = LaTeXParser.BraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_bra)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.match(LaTeXParser.L_ANGLE)
            self.state = 329
            self.expr()
            self.state = 330
            _la = self._input.LA(1)
            if not(_la==27 or _la==28):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_ANGLE(self):
            return self.getToken(LaTeXParser.R_ANGLE, 0)

        def L_BAR(self):
            return self.getToken(LaTeXParser.L_BAR, 0)

        def BAR(self):
            return self.getToken(LaTeXParser.BAR, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_ket




    def ket(self):

        localctx = LaTeXParser.KetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_ket)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            _la = self._input.LA(1)
            if not(_la==27 or _la==29):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 333
            self.expr()
            self.state = 334
            self.match(LaTeXParser.R_ANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_MATHIT(self):
            return self.getToken(LaTeXParser.CMD_MATHIT, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def mathit_text(self):
            return self.getTypedRuleContext(LaTeXParser.Mathit_textContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_mathit




    def mathit(self):

        localctx = LaTeXParser.MathitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_mathit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(LaTeXParser.CMD_MATHIT)
            self.state = 337
            self.match(LaTeXParser.L_BRACE)
            self.state = 338
            self.mathit_text()
            self.state = 339
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mathit_textContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.LETTER)
            else:
                return self.getToken(LaTeXParser.LETTER, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.DIGIT)
            else:
                return self.getToken(LaTeXParser.DIGIT, i)

        def special(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.SpecialContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.SpecialContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_mathit_text




    def mathit_text(self):

        localctx = LaTeXParser.Mathit_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_mathit_text)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==25 or _la==26 or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 78837) != 0):
                self.state = 344
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [78]:
                    self.state = 341
                    self.match(LaTeXParser.LETTER)
                    pass
                elif token in [79]:
                    self.state = 342
                    self.match(LaTeXParser.DIGIT)
                    pass
                elif token in [25, 26, 74, 76, 80, 81, 82, 83, 86, 87, 90]:
                    self.state = 343
                    self.special()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 348
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CMD_TEXT(self):
            return self.getToken(LaTeXParser.CMD_TEXT, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def text_text(self):
            return self.getTypedRuleContext(LaTeXParser.Text_textContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_text




    def text(self):

        localctx = LaTeXParser.TextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_text)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self.match(LaTeXParser.CMD_TEXT)
            self.state = 350
            self.match(LaTeXParser.L_BRACE)
            self.state = 351
            self.text_text()
            self.state = 352
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Text_textContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LETTER(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.LETTER)
            else:
                return self.getToken(LaTeXParser.LETTER, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.DIGIT)
            else:
                return self.getToken(LaTeXParser.DIGIT, i)

        def special(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.SpecialContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.SpecialContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_text_text




    def text_text(self):

        localctx = LaTeXParser.Text_textContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_text_text)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==25 or _la==26 or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 78837) != 0):
                self.state = 357
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [78]:
                    self.state = 354
                    self.match(LaTeXParser.LETTER)
                    pass
                elif token in [79]:
                    self.state = 355
                    self.match(LaTeXParser.DIGIT)
                    pass
                elif token in [25, 26, 74, 76, 80, 81, 82, 83, 86, 87, 90]:
                    self.state = 356
                    self.special()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 361
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FracContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.upperd = None # Token
            self.upper = None # ExprContext
            self.lowerd = None # Token
            self.lower = None # ExprContext

        def CMD_FRAC(self):
            return self.getToken(LaTeXParser.CMD_FRAC, 0)

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.L_BRACE)
            else:
                return self.getToken(LaTeXParser.L_BRACE, i)

        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.R_BRACE)
            else:
                return self.getToken(LaTeXParser.R_BRACE, i)

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.DIGIT)
            else:
                return self.getToken(LaTeXParser.DIGIT, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_frac




    def frac(self):

        localctx = LaTeXParser.FracContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_frac)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(LaTeXParser.CMD_FRAC)
            self.state = 368
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79]:
                self.state = 363
                localctx.upperd = self.match(LaTeXParser.DIGIT)
                pass
            elif token in [21]:
                self.state = 364
                self.match(LaTeXParser.L_BRACE)
                self.state = 365
                localctx.upper = self.expr()
                self.state = 366
                self.match(LaTeXParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 375
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79]:
                self.state = 370
                localctx.lowerd = self.match(LaTeXParser.DIGIT)
                pass
            elif token in [21]:
                self.state = 371
                self.match(LaTeXParser.L_BRACE)
                self.state = 372
                localctx.lower = self.expr()
                self.state = 373
                self.match(LaTeXParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.n = None # ExprContext
            self.k = None # ExprContext

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.L_BRACE)
            else:
                return self.getToken(LaTeXParser.L_BRACE, i)

        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.R_BRACE)
            else:
                return self.getToken(LaTeXParser.R_BRACE, i)

        def CMD_BINOM(self):
            return self.getToken(LaTeXParser.CMD_BINOM, 0)

        def CMD_DBINOM(self):
            return self.getToken(LaTeXParser.CMD_DBINOM, 0)

        def CMD_TBINOM(self):
            return self.getToken(LaTeXParser.CMD_TBINOM, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def getRuleIndex(self):
            return LaTeXParser.RULE_binom




    def binom(self):

        localctx = LaTeXParser.BinomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_binom)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            _la = self._input.LA(1)
            if not(((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 378
            self.match(LaTeXParser.L_BRACE)
            self.state = 379
            localctx.n = self.expr()
            self.state = 380
            self.match(LaTeXParser.R_BRACE)
            self.state = 381
            self.match(LaTeXParser.L_BRACE)
            self.state = 382
            localctx.k = self.expr()
            self.state = 383
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None # ExprContext

        def L_FLOOR(self):
            return self.getToken(LaTeXParser.L_FLOOR, 0)

        def R_FLOOR(self):
            return self.getToken(LaTeXParser.R_FLOOR, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_floor




    def floor(self):

        localctx = LaTeXParser.FloorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_floor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.match(LaTeXParser.L_FLOOR)
            self.state = 386
            localctx.val = self.expr()
            self.state = 387
            self.match(LaTeXParser.R_FLOOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CeilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None # ExprContext

        def L_CEIL(self):
            return self.getToken(LaTeXParser.L_CEIL, 0)

        def R_CEIL(self):
            return self.getToken(LaTeXParser.R_CEIL, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_ceil




    def ceil(self):

        localctx = LaTeXParser.CeilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_ceil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.match(LaTeXParser.L_CEIL)
            self.state = 390
            localctx.val = self.expr()
            self.state = 391
            self.match(LaTeXParser.R_CEIL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_normalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC_EXP(self):
            return self.getToken(LaTeXParser.FUNC_EXP, 0)

        def FUNC_LOG(self):
            return self.getToken(LaTeXParser.FUNC_LOG, 0)

        def FUNC_LG(self):
            return self.getToken(LaTeXParser.FUNC_LG, 0)

        def FUNC_LN(self):
            return self.getToken(LaTeXParser.FUNC_LN, 0)

        def FUNC_SIN(self):
            return self.getToken(LaTeXParser.FUNC_SIN, 0)

        def FUNC_COS(self):
            return self.getToken(LaTeXParser.FUNC_COS, 0)

        def FUNC_TAN(self):
            return self.getToken(LaTeXParser.FUNC_TAN, 0)

        def FUNC_CSC(self):
            return self.getToken(LaTeXParser.FUNC_CSC, 0)

        def FUNC_SEC(self):
            return self.getToken(LaTeXParser.FUNC_SEC, 0)

        def FUNC_COT(self):
            return self.getToken(LaTeXParser.FUNC_COT, 0)

        def FUNC_ARCSIN(self):
            return self.getToken(LaTeXParser.FUNC_ARCSIN, 0)

        def FUNC_ARCCOS(self):
            return self.getToken(LaTeXParser.FUNC_ARCCOS, 0)

        def FUNC_ARCTAN(self):
            return self.getToken(LaTeXParser.FUNC_ARCTAN, 0)

        def FUNC_ARCCSC(self):
            return self.getToken(LaTeXParser.FUNC_ARCCSC, 0)

        def FUNC_ARCSEC(self):
            return self.getToken(LaTeXParser.FUNC_ARCSEC, 0)

        def FUNC_ARCCOT(self):
            return self.getToken(LaTeXParser.FUNC_ARCCOT, 0)

        def FUNC_SINH(self):
            return self.getToken(LaTeXParser.FUNC_SINH, 0)

        def FUNC_COSH(self):
            return self.getToken(LaTeXParser.FUNC_COSH, 0)

        def FUNC_TANH(self):
            return self.getToken(LaTeXParser.FUNC_TANH, 0)

        def FUNC_ARSINH(self):
            return self.getToken(LaTeXParser.FUNC_ARSINH, 0)

        def FUNC_ARCOSH(self):
            return self.getToken(LaTeXParser.FUNC_ARCOSH, 0)

        def FUNC_ARTANH(self):
            return self.getToken(LaTeXParser.FUNC_ARTANH, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_func_normal




    def func_normal(self):

        localctx = LaTeXParser.Func_normalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_func_normal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 576460614864470016) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.root = None # ExprContext
            self.base = None # ExprContext

        def func_normal(self):
            return self.getTypedRuleContext(LaTeXParser.Func_normalContext,0)


        def L_PAREN(self):
            return self.getToken(LaTeXParser.L_PAREN, 0)

        def func_arg(self):
            return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)


        def R_PAREN(self):
            return self.getToken(LaTeXParser.R_PAREN, 0)

        def func_arg_noparens(self):
            return self.getTypedRuleContext(LaTeXParser.Func_arg_noparensContext,0)


        def subexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SubexprContext,0)


        def supexpr(self):
            return self.getTypedRuleContext(LaTeXParser.SupexprContext,0)


        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def args(self):
            return self.getTypedRuleContext(LaTeXParser.ArgsContext,0)


        def LETTER(self):
            return self.getToken(LaTeXParser.LETTER, 0)

        def SYMBOL(self):
            return self.getToken(LaTeXParser.SYMBOL, 0)

        def SINGLE_QUOTES(self):
            return self.getToken(LaTeXParser.SINGLE_QUOTES, 0)

        def FUNC_INT(self):
            return self.getToken(LaTeXParser.FUNC_INT, 0)

        def DIFFERENTIAL(self):
            return self.getToken(LaTeXParser.DIFFERENTIAL, 0)

        def frac(self):
            return self.getTypedRuleContext(LaTeXParser.FracContext,0)


        def additive(self):
            return self.getTypedRuleContext(LaTeXParser.AdditiveContext,0)


        def FUNC_SQRT(self):
            return self.getToken(LaTeXParser.FUNC_SQRT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LaTeXParser.ExprContext)
            else:
                return self.getTypedRuleContext(LaTeXParser.ExprContext,i)


        def L_BRACKET(self):
            return self.getToken(LaTeXParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(LaTeXParser.R_BRACKET, 0)

        def FUNC_OVERLINE(self):
            return self.getToken(LaTeXParser.FUNC_OVERLINE, 0)

        def mp(self):
            return self.getTypedRuleContext(LaTeXParser.MpContext,0)


        def FUNC_SUM(self):
            return self.getToken(LaTeXParser.FUNC_SUM, 0)

        def FUNC_PROD(self):
            return self.getToken(LaTeXParser.FUNC_PROD, 0)

        def subeq(self):
            return self.getTypedRuleContext(LaTeXParser.SubeqContext,0)


        def FUNC_LIM(self):
            return self.getToken(LaTeXParser.FUNC_LIM, 0)

        def limit_sub(self):
            return self.getTypedRuleContext(LaTeXParser.Limit_subContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_func




    def func(self):

        localctx = LaTeXParser.FuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_func)
        self._la = 0 # Token type
        try:
            self.state = 495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 395
                self.func_normal()
                self.state = 408
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==74:
                        self.state = 396
                        self.subexpr()


                    self.state = 400
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==75:
                        self.state = 399
                        self.supexpr()


                    pass

                elif la_ == 2:
                    self.state = 403
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==75:
                        self.state = 402
                        self.supexpr()


                    self.state = 406
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==74:
                        self.state = 405
                        self.subexpr()


                    pass


                self.state = 411
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 410
                    self.match(LaTeXParser.L_BRACE)


                self.state = 418
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 413
                    self.match(LaTeXParser.L_PAREN)
                    self.state = 414
                    self.func_arg()
                    self.state = 415
                    self.match(LaTeXParser.R_PAREN)
                    pass

                elif la_ == 2:
                    self.state = 417
                    self.func_arg_noparens()
                    pass


                self.state = 421
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                if la_ == 1:
                    self.state = 420
                    self.match(LaTeXParser.R_BRACE)


                pass
            elif token in [78, 92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 423
                _la = self._input.LA(1)
                if not(_la==78 or _la==92):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 436
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 425
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==74:
                        self.state = 424
                        self.subexpr()


                    self.state = 428
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==91:
                        self.state = 427
                        self.match(LaTeXParser.SINGLE_QUOTES)


                    pass

                elif la_ == 2:
                    self.state = 431
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==91:
                        self.state = 430
                        self.match(LaTeXParser.SINGLE_QUOTES)


                    self.state = 434
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==74:
                        self.state = 433
                        self.subexpr()


                    pass


                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==21:
                    self.state = 438
                    self.match(LaTeXParser.L_BRACE)


                self.state = 441
                self.match(LaTeXParser.L_PAREN)
                self.state = 442
                self.args()
                self.state = 443
                self.match(LaTeXParser.R_PAREN)

                self.state = 445
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                if la_ == 1:
                    self.state = 444
                    self.match(LaTeXParser.R_BRACE)


                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 3)
                self.state = 447
                self.match(LaTeXParser.FUNC_INT)
                self.state = 454
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [74]:
                    self.state = 448
                    self.subexpr()
                    self.state = 449
                    self.supexpr()
                    pass
                elif token in [75]:
                    self.state = 451
                    self.supexpr()
                    self.state = 452
                    self.subexpr()
                    pass
                elif token in [15, 16, 19, 21, 23, 25, 27, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 68, 69, 70, 71, 72, 73, 77, 78, 79, 92]:
                    pass
                else:
                    pass
                self.state = 462
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 457
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                    if la_ == 1:
                        self.state = 456
                        self.additive(0)


                    self.state = 459
                    self.match(LaTeXParser.DIFFERENTIAL)
                    pass

                elif la_ == 2:
                    self.state = 460
                    self.frac()
                    pass

                elif la_ == 3:
                    self.state = 461
                    self.additive(0)
                    pass


                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 4)
                self.state = 464
                self.match(LaTeXParser.FUNC_SQRT)
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 465
                    self.match(LaTeXParser.L_BRACKET)
                    self.state = 466
                    localctx.root = self.expr()
                    self.state = 467
                    self.match(LaTeXParser.R_BRACKET)


                self.state = 471
                self.match(LaTeXParser.L_BRACE)
                self.state = 472
                localctx.base = self.expr()
                self.state = 473
                self.match(LaTeXParser.R_BRACE)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 5)
                self.state = 475
                self.match(LaTeXParser.FUNC_OVERLINE)
                self.state = 476
                self.match(LaTeXParser.L_BRACE)
                self.state = 477
                localctx.base = self.expr()
                self.state = 478
                self.match(LaTeXParser.R_BRACE)
                pass
            elif token in [35, 36]:
                self.enterOuterAlt(localctx, 6)
                self.state = 480
                _la = self._input.LA(1)
                if not(_la==35 or _la==36):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 487
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [74]:
                    self.state = 481
                    self.subeq()
                    self.state = 482
                    self.supexpr()
                    pass
                elif token in [75]:
                    self.state = 484
                    self.supexpr()
                    self.state = 485
                    self.subeq()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 489
                self.mp(0)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 7)
                self.state = 491
                self.match(LaTeXParser.FUNC_LIM)
                self.state = 492
                self.limit_sub()
                self.state = 493
                self.mp(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def args(self):
            return self.getTypedRuleContext(LaTeXParser.ArgsContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_args




    def args(self):

        localctx = LaTeXParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_args)
        try:
            self.state = 502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 497
                self.expr()
                self.state = 498
                self.match(LaTeXParser.T__0)
                self.state = 499
                self.args()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 501
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_subContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def L_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.L_BRACE)
            else:
                return self.getToken(LaTeXParser.L_BRACE, i)

        def LIM_APPROACH_SYM(self):
            return self.getToken(LaTeXParser.LIM_APPROACH_SYM, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BRACE(self, i:int=None):
            if i is None:
                return self.getTokens(LaTeXParser.R_BRACE)
            else:
                return self.getToken(LaTeXParser.R_BRACE, i)

        def LETTER(self):
            return self.getToken(LaTeXParser.LETTER, 0)

        def SYMBOL(self):
            return self.getToken(LaTeXParser.SYMBOL, 0)

        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def ADD(self):
            return self.getToken(LaTeXParser.ADD, 0)

        def SUB(self):
            return self.getToken(LaTeXParser.SUB, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_limit_sub




    def limit_sub(self):

        localctx = LaTeXParser.Limit_subContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_limit_sub)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 505
            self.match(LaTeXParser.L_BRACE)
            self.state = 506
            _la = self._input.LA(1)
            if not(_la==78 or _la==92):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 507
            self.match(LaTeXParser.LIM_APPROACH_SYM)
            self.state = 508
            self.expr()
            self.state = 517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 509
                self.match(LaTeXParser.CARET)
                self.state = 515
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [21]:
                    self.state = 510
                    self.match(LaTeXParser.L_BRACE)
                    self.state = 511
                    _la = self._input.LA(1)
                    if not(_la==15 or _la==16):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 512
                    self.match(LaTeXParser.R_BRACE)
                    pass
                elif token in [15]:
                    self.state = 513
                    self.match(LaTeXParser.ADD)
                    pass
                elif token in [16]:
                    self.state = 514
                    self.match(LaTeXParser.SUB)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 519
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def func_arg(self):
            return self.getTypedRuleContext(LaTeXParser.Func_argContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_func_arg




    def func_arg(self):

        localctx = LaTeXParser.Func_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_func_arg)
        try:
            self.state = 526
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 521
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 522
                self.expr()
                self.state = 523
                self.match(LaTeXParser.T__0)
                self.state = 524
                self.func_arg()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_arg_noparensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mp_nofunc(self):
            return self.getTypedRuleContext(LaTeXParser.Mp_nofuncContext,0)


        def getRuleIndex(self):
            return LaTeXParser.RULE_func_arg_noparens




    def func_arg_noparens(self):

        localctx = LaTeXParser.Func_arg_noparensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_func_arg_noparens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.mp_nofunc(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_subexpr




    def subexpr(self):

        localctx = LaTeXParser.SubexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_subexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 536
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27, 29, 30, 68, 69, 70, 71, 72, 73, 77, 78, 79, 92]:
                self.state = 531
                self.atom()
                pass
            elif token in [21]:
                self.state = 532
                self.match(LaTeXParser.L_BRACE)
                self.state = 533
                self.expr()
                self.state = 534
                self.match(LaTeXParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SupexprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CARET(self):
            return self.getToken(LaTeXParser.CARET, 0)

        def atom(self):
            return self.getTypedRuleContext(LaTeXParser.AtomContext,0)


        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(LaTeXParser.ExprContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_supexpr




    def supexpr(self):

        localctx = LaTeXParser.SupexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_supexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.match(LaTeXParser.CARET)
            self.state = 544
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27, 29, 30, 68, 69, 70, 71, 72, 73, 77, 78, 79, 92]:
                self.state = 539
                self.atom()
                pass
            elif token in [21]:
                self.state = 540
                self.match(LaTeXParser.L_BRACE)
                self.state = 541
                self.expr()
                self.state = 542
                self.match(LaTeXParser.R_BRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def equality(self):
            return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_subeq




    def subeq(self):

        localctx = LaTeXParser.SubeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_subeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 547
            self.match(LaTeXParser.L_BRACE)
            self.state = 548
            self.equality()
            self.state = 549
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SupeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNDERSCORE(self):
            return self.getToken(LaTeXParser.UNDERSCORE, 0)

        def L_BRACE(self):
            return self.getToken(LaTeXParser.L_BRACE, 0)

        def equality(self):
            return self.getTypedRuleContext(LaTeXParser.EqualityContext,0)


        def R_BRACE(self):
            return self.getToken(LaTeXParser.R_BRACE, 0)

        def getRuleIndex(self):
            return LaTeXParser.RULE_supeq




    def supeq(self):

        localctx = LaTeXParser.SupeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_supeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(LaTeXParser.UNDERSCORE)
            self.state = 552
            self.match(LaTeXParser.L_BRACE)
            self.state = 553
            self.equality()
            self.state = 554
            self.match(LaTeXParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[2] = self.relation_sempred
        self._predicates[5] = self.additive_sempred
        self._predicates[6] = self.mp_sempred
        self._predicates[7] = self.mp_nofunc_sempred
        self._predicates[16] = self.exp_sempred
        self._predicates[17] = self.exp_nofunc_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def relation_sempred(self, localctx:RelationContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)


    def additive_sempred(self, localctx:AdditiveContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)


    def mp_sempred(self, localctx:MpContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)


    def mp_nofunc_sempred(self, localctx:Mp_nofuncContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)


    def exp_sempred(self, localctx:ExpContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)


    def exp_nofunc_sempred(self, localctx:Exp_nofuncContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)





